{"version":3,"sources":["components/jumbotron.js","utils/API.js","components/tableHeader.js","components/tableBody.js","components/table.js","components/pagination.js","components/searchBox.js","components/users.js","utils/paginate.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","style","textAlign","backgroundColor","color","fontWeight","className","marginTop","axios","get","TableHeader","raiseSort","path","sortColumn","props","order","onSort","renderSortIcon","column","this","columns","map","key","onClick","label","Component","TableBody","users","undefined","name","login","picture","location","cell","email","uuid","src","medium","alt","first","last","state","Table","Pagination","itemsCount","pageSize","onPageChange","currentPage","pagesCount","Math","ceil","pages","_","range","page","SearchBox","handleSearch","width","borderStyle","borderRadius","borderColor","display","margin","height","marginBottom","type","placeholder","onChange","e","Users","filteredUsers","handleSort","setState","handlePageChange","event","value","target","filteredList","filter","user","Object","values","join","toLowerCase","indexOf","API","then","res","data","results","catch","err","console","log","count","length","searchQuery","items","pageNumber","startIndex","slice","take","paginate","orderBy","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb348469.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Jumbotron = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        textAlign: \"center\",\r\n        backgroundColor: \"rgb(175, 33, 33)\",\r\n        color: \"white\",\r\n        fontWeight: \"bold\"\r\n      }}\r\n      className=\"jumbotron\"\r\n    >\r\n      <h1 className=\"display-3\">\r\n        Employee Directory\r\n        <p className=\"lead\" style={{marginTop: \"15px\"}}>\r\n          By clicking on heading of each column allows you to sort in ascending or descending orders. Also search by typing first or last names.\r\n        </p>\r\n      </h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Jumbotron;\r\n","import axios from \"axios\";\r\n\r\n\r\nexport default {\r\n\r\n    getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=100&nat=us\");\r\n      }\r\n    \r\n}","import React, { Component } from \"react\";\r\n\r\nclass TableHeader extends Component {\r\n  raiseSort = path => {\r\n    const sortColumn = { ...this.props.sortColumn };\r\n    if (sortColumn.path === path)\r\n      sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\r\n    else {\r\n      sortColumn.path = path;\r\n      sortColumn.order = \"asc\";\r\n    }\r\n    this.props.onSort(sortColumn);\r\n  };\r\n\r\n  renderSortIcon = column => {\r\n    const { sortColumn } = this.props;\r\n    if (column.path !== sortColumn.path) return null;\r\n    if (sortColumn.order === \"asc\") return <i className=\"fa fa-sort-asc\"></i>;\r\n    return <i className=\"fa fa-sort-desc\"></i>;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <thead className=\"thead-light\">\r\n        <tr>\r\n          {this.props.columns.map(column => (\r\n            <th\r\n              className=\"clickable\"\r\n              key={column.path}\r\n              onClick={() => this.raiseSort(column.path)}\r\n            >\r\n              {column.label} {this.renderSortIcon(column)}\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableHeader;\r\n","import React, { Component } from 'react';\r\n\r\nclass TableBody extends Component {\r\n    render() { \r\n    const {users} = this.props;\r\n        return ( \r\n            <tbody>\r\n            {users[0] !== undefined && users[0].name !== undefined ? (\r\n              users.map(({ login, picture, name, location, cell, email }) => {\r\n                return (\r\n                  <tr key={login.uuid}>\r\n                    <td>\r\n                      <img src={picture.medium} alt={name.first} />\r\n                    </td>\r\n                    <td>\r\n                      {name.first} {name.last}\r\n                    </td>\r\n                    <td>{location.state}</td>\r\n                    <td>{email}</td>\r\n                    <td>{cell}</td>\r\n                  </tr>\r\n                );\r\n              })\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </tbody>\r\n        )\r\n    }\r\n}\r\n \r\nexport default TableBody;\r\n","import React, { Component } from \"react\";\r\nimport TableHeader from \"./tableHeader\";\r\nimport TableBody from \"./tableBody\";\r\n\r\nclass Table extends Component {\r\n  columns = [\r\n    { path: \"picture.medium\", label: \"Image\" },\r\n    { path: \"name.first\", label: \"Name\" },\r\n    { path: \"location.state\", label: \"State\" },\r\n    { path: \"email\", label: \"Email\" },\r\n    { path: \"cell\", label: \"Phone\" }\r\n  ];\r\n  render() {\r\n    const { users, sortColumn, onSort } = this.props;\r\n    return (\r\n      <table className=\"table table-dark\">\r\n        <TableHeader\r\n          columns={this.columns}\r\n          sortColumn={sortColumn}\r\n          onSort={onSort}\r\n        />\r\n        <TableBody users={users} />\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nconst Pagination = props => {\r\n  const { itemsCount, pageSize, onPageChange, currentPage } = props;\r\n  const pagesCount = Math.ceil(itemsCount / pageSize);\r\n  if (pagesCount === 1) return null;\r\n  const pages = _.range(1, pagesCount + 1);\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pages.map(page => (\r\n          <li key={page} className={page === currentPage ? \"page-item active\" : \"page-item\"}>\r\n            {/* eslint-disable-next-line  */}\r\n            <a className=\"page-link\" onClick={() => onPageChange(page)}>{page}</a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ handleSearch }) => {\r\n  return (\r\n    <input\r\n      style={{\r\n        width: \"60%\",\r\n        borderStyle: \"solid\",\r\n        borderRadius: \"4px\",\r\n        borderColor: \"rgb(175, 33, 33)\",\r\n        display: \"block\",\r\n        margin: \"0 auto\",\r\n        height: \"50px\",\r\n        marginBottom: \"20px\"\r\n      }}\r\n      type=\"text\"\r\n      name=\"query\"\r\n      placeholder=\"Search by name...\"\r\n      onChange={e => handleSearch(e)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Table from \"./table\";\r\nimport Pagination from \"./pagination\";\r\nimport SearchBox from \"./searchBox\";\r\nimport _ from \"lodash\";\r\nimport { paginate } from \"../utils/paginate\";\r\n\r\n\r\nclass Users extends Component {\r\n  state = {\r\n    users: [{}],\r\n    filteredUsers: [{}],\r\n    pageSize: 25,\r\n    currentPage: 1,\r\n    sortColumn: { path: \"name.first\", order: \"asc\" }\r\n  };\r\n\r\n  componentDidMount() {\r\n    API.getUsers()\r\n      .then(res =>\r\n        this.setState({\r\n          users: res.data.results,\r\n          filteredUsers: res.data.results\r\n        })\r\n      )\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  handleSort = sortColumn => {\r\n    this.setState({ sortColumn });\r\n  };\r\n\r\n  handlePageChange = page => {\r\n    this.setState({ currentPage: page });\r\n  };\r\n\r\n  handleSearch = event => {\r\n    const value = event.target.value;\r\n    const filteredList = this.state.users.filter(user => {\r\n      let newValue = Object.values(user)\r\n      .join(\"\")\r\n      .toLowerCase()\r\n      return newValue.indexOf(value.toLowerCase()) !== -1;\r\n    })\r\n\r\n    this.setState({filteredUsers: filteredList, currentPage: 1})\r\n  }\r\n\r\n  render() {\r\n    const { length: count } = this.state.users;\r\n    const { filteredUsers, sortColumn, currentPage, pageSize, searchQuery } = this.state;\r\n    const sorted = _.orderBy(filteredUsers, [sortColumn.path], [sortColumn.order]);\r\n    const users = paginate(sorted, currentPage, pageSize);\r\n\r\n    \r\n    return (\r\n      <>\r\n        <SearchBox value={searchQuery} handleSearch={this.handleSearch}/>\r\n        <Table users={users} onSort={this.handleSort} sortColumn={sortColumn} />\r\n        <Pagination\r\n          itemsCount={count}\r\n          currentPage={currentPage}\r\n          pageSize={pageSize}\r\n          onPageChange={this.handlePageChange}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Users;\r\n","import _ from \"lodash\";\r\n\r\nexport function paginate(items, pageNumber, pageSize) {\r\n  const startIndex = (pageNumber - 1) * pageSize;\r\n  return _(items)\r\n    .slice(startIndex)\r\n    .take(pageSize)\r\n    .value();\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Jumbotron from './components/jumbotron';\nimport Users from './components/users';\n\nfunction App() {\n  return (\n    <main className=\"container\">\n    <Jumbotron />\n      <Users />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}